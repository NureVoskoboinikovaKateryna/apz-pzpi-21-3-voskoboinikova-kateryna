1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Для розробки серверної частини програмної системи обрано мову програмування C# з використанням платформи .NET 8 та фреймворку ASP.NET Core 8.0. Для зберігання даних обрано СУБД MS SQL Server 2019. 
Для взаємодії з MS SQL Server використовуватиметься Entity Framework Core, який є стандартним ORM-інструментом для ASP.NET Core. Для аутентифікації у додатку використовується JSON Web Token (JWT). 
Серверна частина додатку має комплексну монолітну архітектуру, що містить рівні представлення даних, бізнес логіку та логіку доступу до даних. 

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

На рисунку 1.1 зображена діаграма розгортання програмної системи. Діаграма складається з 5 вузлів: база даних, сервер, веб-сервер, мобільний застосунок та smart-пристрій.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина розбита на контролери, сервіси та репозиторії. Основним відповідальним класом для маршрутизації запитів є Program.cs, де налаштовуються маршрути та інші конфігурації додатку.
Контролери, такі як UserAccountController, MedicalRecordController, PatientController та MedicalDeviceController, відповідають за обробку HTTP-запитів, розподіл їх на відповідні сервіси та повернення відповідей клієнту. Контролери містять методи, що відповідають на різні HTTP-запити, такі як GET, POST, PUT та DELETE.
Сервіси відповідають за бізнес-логіку додатку та виконання операцій над даними.
Репозиторії взаємодіють з базою даних та виконують операції збереження, оновлення, видалення та отримання даних.
Також використовується JSON Web Token (JWT) для забезпечення безпеки та автентифікації користувачів. JWT використовується для створення токенів, які підтверджують ідентичність користувачів і дозволяють їм отримувати доступ до ресурсів на сервері. Після успішної аутентифікації користувача, сервер генерує JWT, який містить інформацію про користувача та його ролі. Цей токен надсилається клієнту, який потім використовує його для авторизації при кожному запиті до сервера.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

На рисунку 1.2 зображена діаграма прецедентів програмної системи для дистанційного моніторингу стану здоров’я. У програмній системі є 4 види акторів: пацієнт, лікар, неавторизований користувач, адміністратор. 
В залежності від ролі кожен з них має різну функціональність.

5 ПОБУДОВА ER-ДІАГРАМИ

На рисунку 1.3 зображена ER-модель зображена.
ER-модель складається з 9 основних сутностей. На ній є наступні зв’язки: 
– «Лікар» - «Пацієнт» мають зв’язок один-до-багатьох (у лікаря може бути багато пацієнтів, у пацієнта один лікар);
– «Пацієнт» - «Медичний запис» мають зв’язок один-до-багатьох (у пацієнта може бути багато медичних записів, у медичного запису може бути один пацієнт або жодного);
– «Лікар» - «Медичний запис» мають зв’язок один-до-багатьох (у лікаря може бути багато медичних записів, у медичного запису може бути один лікар або жодного);
– «Пацієнт» - «Вимірювання» мають зв’язок один-до-багатьох (у пацієнта може бути безліч вимірювань, кожне вимірювання відноситься тільки до одного пацієнта);
– «Медичний девайс» - «Вимірювання» мають зв’язок один-до-багатьох (у медичного девайса може бути безліч вимірювань, кожне вимірювання відноситься тільки до одного девайса);
– «Тип медичного девайсу» - «Медичний девайс» мають зв’язок один-до-багатьох (у медичного девайса може бути тільки один тип, у одного типу безліч девайсів);
– «Тип крові» - «Пацієнт» мають зв’язок один-до-багатьох (до одного типу крові може відноситись багато пацієнтів, у кожного пацієнта може бути тільки один тип крові);
– «Пацієнт» - «Повідомлення» мають зв’язок один-до-багатьох (у пацієнта може бути безліч повідомлень, кожне повідомлення відноситься тільки до одного пацієнта);
– «Спеціалізація» - «Лікар» мають зв’язок один-до-багатьох (у однієї спеціалізації може бути багато лікарів, у лікаря може бути тільки одна спеціалізація);

6 СПЕЦИФІКАЦІЯ REST 

Для обміну даними використовується REST API. Специфікація REST API наведена у додатку А. У таблиці наведено посилання, метод та призначення.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

На рисунку 1.4 зображена діаграма компонентів. На діаграмі зображено як компоненти взаємодіють один з одним.
ASP.NET Core Server містить основні компоненти серверної частини програми:
– MainController: Головний контролер, який обробляє запити від різних клієнтів.
– HealthService: Компонент, що обробляє запити від смарт-пристрою.
– StayHealthService: Компонент, що обробляє запити від Android пристрою.
– WebService: Компонент, що обробляє запити від веб-сервера.
– EF Core: Ядро Entity Framework для ORM-операцій з MS SQL Server.
Database Server містить компонент MS SQL Server.
Smart Device містить HealthService API – сервіс, що працює на смарт-пристрої та взаємодіє з основним сервером ASP.NET.
Android Device містить StayHealth.apk – додаток для Android, який взаємодіє з основним сервером ASP.NET.
Веб-сервер містить Index.cs – Веб-додаток, який взаємодіє з основним сервером ASP.NET.
З'єднання:
– HealthService API взаємодіє з MainController через HTTP.
– StayHealth.apk взаємодіє з MainController через HTTP.
– Index.cs взаємодіє з MainController через HTTP.
– EF Core взаємодіє з MS SQL Server через TCP/IP для операцій з базою даних.

ВИСНОВКИ

Під час даної лабораторної роботи була розроблена серверна частина програмної системи для дистанційного моніторингу стану здоров’я, описано прийняті інженерні рішення, розроблено діаграми, які наводять архітектуру системи, будову її серверних компонентів та структуру бази даних.

ДОДАТОК А
Специфікація REST
Посилання  Метод  Призначення
/api/Administrators	GET	Отримання всіх адміністраторів
/api/Administrators/{adminId}	GET	Отримання конкретного адміністратора за ідентифікатором
/api/Administrators/email/{email}	GET	Отримання адміністратора за email
/api/Administrators	POST	Створення нового адміністратора
/api/Administrators/{adminId}	PUT	Оновлення інформації про адміністратора за ідентифікатором
/api/Administrators/{adminId}	DELETE	Видалення адміністратора за ідентифікатором
/api/Administrators/acc/{adminId}	DELETE	Видалення адміністратора та його облікового запису за ідентифікатором
/api/BloodTypes	GET	Отримання всіх груп крові
/api/BloodTypes/{btypeId}	GET	Отримання групи крові за ідентифікатором
/api/BloodTypes/patients/{btypeId}	GET	Отримання пацієнтів з певною групою крові
/api/Patients	GET	Отримати всіх пацієнтів
/api/Patients/{patientId}	GET	Отримати пацієнта за ідентифікатором
/api/Patients/email/{email}	GET	Отримати пацієнта за електронною поштою
/api/Patients/doctor/{doctorId}	GET	Отримати пацієнтів, призначених даному лікарю
/api/Patients/notifications/{patientId}	GET	Отримати сповіщення для пацієнта
/api/Patients/measurements/{patientId}	GET	Отримати вимірювання для пацієнта
/api/Patients/mrecords/{patientId}	GET	Отримати медичні записи для пацієнта
/api/Patients	POST	Створити нового пацієнта
/api/Patients/{patientId}	PUT	Оновити інформацію про пацієнта за ідентифікатором
/api/Patients/{patientId}	DELETE	Видалити пацієнта за ідентифікатором
/api/Patients/acc/{patientId}	DELETE	Видалити пацієнта та пов'язаний з ним обліковий запис
/api/MedicalDevices	GET	Отримати список всіх медичних пристроїв.
/api/MedicalDevices/type/{mdevicetypeId}	GET	Отримати список медичних пристроїв за ідентифікатором типу пристрою.
/api/MedicalDevices/{mdeviceId}	GET	Отримати інформацію про медичний пристрій за його ідентифікатором.
/api/MedicalDevices	POST	Створити новий медичний пристрій.
/api/MedicalDevices/{mdeviceId}	PUT	Оновити інформацію про медичний пристрій за його ідентифікатором.
/api/MedicalDevices/{mdeviceId}	DELETE	Видалити медичний пристрій за його ідентифікатором.
/api/Companies	GET	Отримання всіх компаній
/api/Companies/{companyId}	GET	Отримання компанії за ідентифікатором
/api/Companies/patients/{companyId}	GET	Отримання пацієнтів, які належать певній компанії
/api/Companies	POST	Створення нової компанії
/api/Companies/{companyId}	PUT	Оновлення інформації про компанію за її ідентифікатором
/api/Companies/{companyId}	DELETE	Видалення компанії за її ідентифікатором
/api/CompanyManagers	GET	Отримання всіх менеджерів компаній
/api/CompanyManagers/{managerId}	GET	Отримання менеджера компанії за ідентифікатором
/api/CompanyManagers/email/{email}	GET	Отримання менеджера компанії за email
/api/CompanyManagers	POST	Створення нового менеджера компанії
/api/CompanyManagers/{managerId}	PUT	Оновлення інформації про менеджера компанії за ідентифікатором
/api/CompanyManagers/{managerId}	DELETE	Видалення менеджера компанії за ідентифікатором
/api/CompanyManagers/acc/{managerId}	DELETE	Видалення менеджера компанії та його облікового запису за ідентифікатором
/api/Doctors	GET	Отримання всіх лікарів
/api/Doctors/{doctorId}	GET	Отримання лікаря за ідентифікатором
/api/Doctors/email/{email}	GET	Отримання лікаря за email
/api/Doctors/mrecords/{doctorId}	GET	Отримання медичних записів лікаря за ідентифікатором
/api/Doctors	POST	Створення нового лікаря
/api/Doctors/{doctorId}	PUT	Оновлення інформації про лікаря за ідентифікатором
/api/Doctors/{doctorId}	DELETE	Видалення лікаря за ідентифікатором
/api/Doctors/acc/{doctorId}	DELETE	Видалення лікаря та його облікового запису за ідентифікатором
/api/Accounts/register-admin	POST	Зареєструвати адміністратора
/api/Accounts/register-manager	POST	Зареєструвати менеджера компанії
/api/Accounts/register-doctor	POST	Зареєструвати лікаря
/api/Accounts/register-patient	POST	Зареєструвати пацієнта
/api/Accounts/login	POST	Увійти в систему
/api/MedicalRecords	GET	Отримати всі медичні записи
/api/MedicalRecords/{mrecordId}	GET	Отримати медичний запис за ідентифікатором
/api/MedicalRecords/patient/{patientId}	GET	Отримати медичні записи пацієнта за ідентифікатором
/api/MedicalRecords/patient/{patientId}/doctor/{doctorId}	GET	Отримати медичні записи пацієнта за ідентифікатором пацієнта та лікаря
/api/MedicalRecords/doctor/{doctorId}	GET	Отримати медичні записи лікаря за ідентифікатором
/api/MedicalRecords	POST	Створити новий медичний запис
/api/MedicalRecords/{mrecordId}	PUT	Оновити існуючий медичний запис
