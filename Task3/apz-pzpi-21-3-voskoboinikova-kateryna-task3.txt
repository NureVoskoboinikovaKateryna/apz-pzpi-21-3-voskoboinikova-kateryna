1 МЕТА РОБОТИ

Розробити програмне забезпечення IoT пристрою для системи дистанційного моніторингу стану здоров’я пацієнтів, описати прийняті інженерні рішення, будову програмного забезпечення.

2 ХІД РОБОТИ
2.1 Опис прийнятих інженерних рішень

Для розробки програмного забезпечення для IoT пристрою смарт-годинника було обрано технологію ASP.NET Core, у якості пристрою обрано Raspberry Pi. Raspberry Pi зазвичай використовують для створення малих, потужних комп'ютерів, але також його можна використовувати для розгортання та запуску веб-додатків.

2.2 Структура проекту
Розумний пристрій самостійно слідкує за станом пацієнта відповідно до стандартного діапазону нормальних температур та пульсу. Для цього в проекті створено сервіс контролю значень, який кожні 5 хвилин імітує зчитування з датчику значень температури та пульсу, звіряє з допустимими та в разі невідповідності якогось з отриманих показників нормі відправляє сповіщення. 
Головний файл Program.cs (див. Додаток А) - вхідна точка програми, виконує запуск додатку, його сервісів та контролерів. MeasurementService.cs (див. Додаток Б) - сервіс, який зчитує, оброблює та аналізує отриманні вимірювання.
У проекті також наявні файли моделей, які застосовуються для роботи додатку, та файли з розширенням .json для локалізації українською та англійською мовами.

3 ОПИС ЧАСТИН ПРОГРАМНОГО КОДУ
3.1 Локалізація

Додаток має локалізацію, надаючи користувачу можливість обрати бажану мову (див. Додаток А). Після здійснення вибору всі ресурси, необхідні для локалізації додатку, завантажуються з файлу .json. У випадку відсутності файлу з обраною мовою, завантажується файл української як стандартної мови. 

3.2 Збір та аналіз даних
Збір, обробка та аналіз отриманих даних здійснюється сервісом MeasurementService.cs (див. Додаток Б). Отримані дані надсилаються до бази даних за допомогою запитів.

4 UML ДІАГРАМИ СИСТЕМИ
4.1 UML діаграма прецедентів (Use Case Diagram)

На рисунку 1.4.1 зображена діаграма прецедентів програмного забезпечення IoT пристрою для системи дистанційного моніторингу стану здоров’я. Є 2 види акторів: користувач та IoT пристрій. В залежності від ролі кожен з них має різну функціональність.

4.2 UML діаграма взаємодії (Interaction Overview Diagram)

На рисунку 1.4.2 зображена діаграма взаємодії  програмної системи для дистанційного моніторингу стану здоров’я. На ній відображено опис поведінки об'єктів, які відстежують стан показників, надсилають їх на сервер та сповіщають у разі відхилення від норми.

4.3 UML діаграма діяльності (Activity Diagram)

На рисунку 1.4.3 зображена діаграма діяльності пристрою IoT. 

4.4 UML діаграма компонент (Component  Diagram)

На рисунку 1.4.4 зображена діаграма компонентів. Є 4 компонента: Health Monitoring(представляє основну функціональність пристрою для моніторингу здоров'я), Data Processing(відповідає за обробку та аналіз виміряних даних), Emergency Alert(запускає екстрені сповіщення на підставі критичних показників) та Data Display(відображає отримані дані).

5 ВИСНОВКИ

Під час даної лабораторної роботи було розроблено програмне забезпечення для IoT пристрою системи дистанційного моніторингу стану здоров’я, описано прийняті інженерні рішення, розроблено діаграми, які наводять будову програмного забезпечення.

ДОДАТОК А
Program.cs


